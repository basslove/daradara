// Package openapi_service provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi_service

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// 観光場所カテゴリ for operator
	// (GET /kanri/sight_categories)
	OperatorGetSightCategories(ctx echo.Context, params OperatorGetSightCategoriesParams) error
	// 観光ジャンル for operator
	// (GET /kanri/sight_genres)
	OperatorGetSightGenres(ctx echo.Context, params OperatorGetSightGenresParams) error
	// オペレーターサインイン
	// (POST /kanri/sign_in)
	OperatorPostOperatorsSignIn(ctx echo.Context) error
	// オペレーター登録
	// (POST /kanri/sign_up)
	OperatorPostOperators(ctx echo.Context) error
	// 観光場所カテゴリ for customer
	// (GET /sight_categories)
	CustomerGetSightCategories(ctx echo.Context, params CustomerGetSightCategoriesParams) error
	// 観光ジャンル for customer
	// (GET /sight_genres)
	CustomerGetSightGenres(ctx echo.Context, params CustomerGetSightGenresParams) error
	// カスタマーサインイン
	// (POST /sign_in)
	CustomerPostCustomersSignIn(ctx echo.Context) error
	// カスタマー登録
	// (POST /sign_up)
	CustomerPostCustomers(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// OperatorGetSightCategories converts echo context to params.
func (w *ServerInterfaceWrapper) OperatorGetSightCategories(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatorGetSightCategoriesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OperatorGetSightCategories(ctx, params)
	return err
}

// OperatorGetSightGenres converts echo context to params.
func (w *ServerInterfaceWrapper) OperatorGetSightGenres(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params OperatorGetSightGenresParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "sight_category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "sight_category_id", ctx.QueryParams(), &params.SightCategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sight_category_id: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OperatorGetSightGenres(ctx, params)
	return err
}

// OperatorPostOperatorsSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) OperatorPostOperatorsSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OperatorPostOperatorsSignIn(ctx)
	return err
}

// OperatorPostOperators converts echo context to params.
func (w *ServerInterfaceWrapper) OperatorPostOperators(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.OperatorPostOperators(ctx)
	return err
}

// CustomerGetSightCategories converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerGetSightCategories(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomerGetSightCategoriesParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerGetSightCategories(ctx, params)
	return err
}

// CustomerGetSightGenres converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerGetSightGenres(ctx echo.Context) error {
	var err error

	ctx.Set(BearerScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params CustomerGetSightGenresParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "sight_category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "sight_category_id", ctx.QueryParams(), &params.SightCategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sight_category_id: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerGetSightGenres(ctx, params)
	return err
}

// CustomerPostCustomersSignIn converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerPostCustomersSignIn(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerPostCustomersSignIn(ctx)
	return err
}

// CustomerPostCustomers converts echo context to params.
func (w *ServerInterfaceWrapper) CustomerPostCustomers(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CustomerPostCustomers(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/kanri/sight_categories", wrapper.OperatorGetSightCategories)
	router.GET(baseURL+"/kanri/sight_genres", wrapper.OperatorGetSightGenres)
	router.POST(baseURL+"/kanri/sign_in", wrapper.OperatorPostOperatorsSignIn)
	router.POST(baseURL+"/kanri/sign_up", wrapper.OperatorPostOperators)
	router.GET(baseURL+"/sight_categories", wrapper.CustomerGetSightCategories)
	router.GET(baseURL+"/sight_genres", wrapper.CustomerGetSightGenres)
	router.POST(baseURL+"/sign_in", wrapper.CustomerPostCustomersSignIn)
	router.POST(baseURL+"/sign_up", wrapper.CustomerPostCustomers)

}
