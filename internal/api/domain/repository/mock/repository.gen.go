// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/basslove/daradara/internal/api/domain/repository (interfaces: CustomerRepository,SightCategoryRepository,SightGenreRepository,ThrottleRepository,OperatorRepository)

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	model "github.com/basslove/daradara/internal/api/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockCustomerRepository is a mock of CustomerRepository interface.
type MockCustomerRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerRepositoryMockRecorder
}

// MockCustomerRepositoryMockRecorder is the mock recorder for MockCustomerRepository.
type MockCustomerRepositoryMockRecorder struct {
	mock *MockCustomerRepository
}

// NewMockCustomerRepository creates a new mock instance.
func NewMockCustomerRepository(ctrl *gomock.Controller) *MockCustomerRepository {
	mock := &MockCustomerRepository{ctrl: ctrl}
	mock.recorder = &MockCustomerRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerRepository) EXPECT() *MockCustomerRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCustomerRepository) Create(arg0 context.Context, arg1 *model.Customer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCustomerRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCustomerRepository)(nil).Create), arg0, arg1)
}

// FindOneByEmail mocks base method.
func (m *MockCustomerRepository) FindOneByEmail(arg0 context.Context, arg1 string) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByEmail", arg0, arg1)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByEmail indicates an expected call of FindOneByEmail.
func (mr *MockCustomerRepositoryMockRecorder) FindOneByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByEmail", reflect.TypeOf((*MockCustomerRepository)(nil).FindOneByEmail), arg0, arg1)
}

// FindOneByName mocks base method.
func (m *MockCustomerRepository) FindOneByName(arg0 context.Context, arg1 string) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByName", arg0, arg1)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByName indicates an expected call of FindOneByName.
func (mr *MockCustomerRepositoryMockRecorder) FindOneByName(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByName", reflect.TypeOf((*MockCustomerRepository)(nil).FindOneByName), arg0, arg1)
}

// Update mocks base method.
func (m *MockCustomerRepository) Update(arg0 context.Context, arg1 *model.Customer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockCustomerRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCustomerRepository)(nil).Update), arg0, arg1)
}

// MockSightCategoryRepository is a mock of SightCategoryRepository interface.
type MockSightCategoryRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSightCategoryRepositoryMockRecorder
}

// MockSightCategoryRepositoryMockRecorder is the mock recorder for MockSightCategoryRepository.
type MockSightCategoryRepositoryMockRecorder struct {
	mock *MockSightCategoryRepository
}

// NewMockSightCategoryRepository creates a new mock instance.
func NewMockSightCategoryRepository(ctrl *gomock.Controller) *MockSightCategoryRepository {
	mock := &MockSightCategoryRepository{ctrl: ctrl}
	mock.recorder = &MockSightCategoryRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightCategoryRepository) EXPECT() *MockSightCategoryRepositoryMockRecorder {
	return m.recorder
}

// FindByName mocks base method.
func (m *MockSightCategoryRepository) FindByName(arg0 context.Context, arg1 string, arg2, arg3 uint64) ([]*model.SightCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].([]*model.SightCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockSightCategoryRepositoryMockRecorder) FindByName(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockSightCategoryRepository)(nil).FindByName), arg0, arg1, arg2, arg3)
}

// FindOneByID mocks base method.
func (m *MockSightCategoryRepository) FindOneByID(arg0 context.Context, arg1 uint64, arg2 bool) (*model.SightCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.SightCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockSightCategoryRepositoryMockRecorder) FindOneByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockSightCategoryRepository)(nil).FindOneByID), arg0, arg1, arg2)
}

// MockSightGenreRepository is a mock of SightGenreRepository interface.
type MockSightGenreRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSightGenreRepositoryMockRecorder
}

// MockSightGenreRepositoryMockRecorder is the mock recorder for MockSightGenreRepository.
type MockSightGenreRepositoryMockRecorder struct {
	mock *MockSightGenreRepository
}

// NewMockSightGenreRepository creates a new mock instance.
func NewMockSightGenreRepository(ctrl *gomock.Controller) *MockSightGenreRepository {
	mock := &MockSightGenreRepository{ctrl: ctrl}
	mock.recorder = &MockSightGenreRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightGenreRepository) EXPECT() *MockSightGenreRepositoryMockRecorder {
	return m.recorder
}

// FindByNameAndCategoryID mocks base method.
func (m *MockSightGenreRepository) FindByNameAndCategoryID(arg0 context.Context, arg1 string, arg2, arg3, arg4 uint64) ([]*model.SightGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameAndCategoryID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*model.SightGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameAndCategoryID indicates an expected call of FindByNameAndCategoryID.
func (mr *MockSightGenreRepositoryMockRecorder) FindByNameAndCategoryID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameAndCategoryID", reflect.TypeOf((*MockSightGenreRepository)(nil).FindByNameAndCategoryID), arg0, arg1, arg2, arg3, arg4)
}

// FindOneByID mocks base method.
func (m *MockSightGenreRepository) FindOneByID(arg0 context.Context, arg1 uint64, arg2 bool) (*model.SightGenre, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.SightGenre)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByID indicates an expected call of FindOneByID.
func (mr *MockSightGenreRepositoryMockRecorder) FindOneByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByID", reflect.TypeOf((*MockSightGenreRepository)(nil).FindOneByID), arg0, arg1, arg2)
}

// MockThrottleRepository is a mock of ThrottleRepository interface.
type MockThrottleRepository struct {
	ctrl     *gomock.Controller
	recorder *MockThrottleRepositoryMockRecorder
}

// MockThrottleRepositoryMockRecorder is the mock recorder for MockThrottleRepository.
type MockThrottleRepositoryMockRecorder struct {
	mock *MockThrottleRepository
}

// NewMockThrottleRepository creates a new mock instance.
func NewMockThrottleRepository(ctrl *gomock.Controller) *MockThrottleRepository {
	mock := &MockThrottleRepository{ctrl: ctrl}
	mock.recorder = &MockThrottleRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThrottleRepository) EXPECT() *MockThrottleRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockThrottleRepository) Create(arg0 context.Context, arg1 *model.Throttle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockThrottleRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockThrottleRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockThrottleRepository) Delete(arg0 context.Context, arg1 *model.Throttle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockThrottleRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockThrottleRepository)(nil).Delete), arg0, arg1)
}

// FindOneByKeyAndType mocks base method.
func (m *MockThrottleRepository) FindOneByKeyAndType(arg0 context.Context, arg1, arg2 string) (*model.Throttle, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByKeyAndType", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.Throttle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByKeyAndType indicates an expected call of FindOneByKeyAndType.
func (mr *MockThrottleRepositoryMockRecorder) FindOneByKeyAndType(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByKeyAndType", reflect.TypeOf((*MockThrottleRepository)(nil).FindOneByKeyAndType), arg0, arg1, arg2)
}

// Update mocks base method.
func (m *MockThrottleRepository) Update(arg0 context.Context, arg1 *model.Throttle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockThrottleRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockThrottleRepository)(nil).Update), arg0, arg1)
}

// MockOperatorRepository is a mock of OperatorRepository interface.
type MockOperatorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorRepositoryMockRecorder
}

// MockOperatorRepositoryMockRecorder is the mock recorder for MockOperatorRepository.
type MockOperatorRepositoryMockRecorder struct {
	mock *MockOperatorRepository
}

// NewMockOperatorRepository creates a new mock instance.
func NewMockOperatorRepository(ctrl *gomock.Controller) *MockOperatorRepository {
	mock := &MockOperatorRepository{ctrl: ctrl}
	mock.recorder = &MockOperatorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorRepository) EXPECT() *MockOperatorRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOperatorRepository) Create(arg0 context.Context, arg1 *model.Operator) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOperatorRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOperatorRepository)(nil).Create), arg0, arg1)
}

// FindOneByEmail mocks base method.
func (m *MockOperatorRepository) FindOneByEmail(arg0 context.Context, arg1 string) (*model.Operator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByEmail", arg0, arg1)
	ret0, _ := ret[0].(*model.Operator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByEmail indicates an expected call of FindOneByEmail.
func (mr *MockOperatorRepositoryMockRecorder) FindOneByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByEmail", reflect.TypeOf((*MockOperatorRepository)(nil).FindOneByEmail), arg0, arg1)
}

// Update mocks base method.
func (m *MockOperatorRepository) Update(arg0 context.Context, arg1 *model.Operator) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOperatorRepositoryMockRecorder) Update(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOperatorRepository)(nil).Update), arg0, arg1)
}
