// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/basslove/daradara/internal/api/domain/service (interfaces: Throttler,CustomerAuthenticator,OperatorAuthenticator)

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/basslove/daradara/internal/api/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockThrottler is a mock of Throttler interface.
type MockThrottler struct {
	ctrl     *gomock.Controller
	recorder *MockThrottlerMockRecorder
}

// MockThrottlerMockRecorder is the mock recorder for MockThrottler.
type MockThrottlerMockRecorder struct {
	mock *MockThrottler
}

// NewMockThrottler creates a new mock instance.
func NewMockThrottler(ctrl *gomock.Controller) *MockThrottler {
	mock := &MockThrottler{ctrl: ctrl}
	mock.recorder = &MockThrottlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockThrottler) EXPECT() *MockThrottlerMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockThrottler) Clear(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockThrottlerMockRecorder) Clear(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockThrottler)(nil).Clear), arg0, arg1, arg2)
}

// Increase mocks base method.
func (m *MockThrottler) Increase(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Increase", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Increase indicates an expected call of Increase.
func (mr *MockThrottlerMockRecorder) Increase(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Increase", reflect.TypeOf((*MockThrottler)(nil).Increase), arg0, arg1, arg2)
}

// IsBlocked mocks base method.
func (m *MockThrottler) IsBlocked(arg0 context.Context, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBlocked", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsBlocked indicates an expected call of IsBlocked.
func (mr *MockThrottlerMockRecorder) IsBlocked(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBlocked", reflect.TypeOf((*MockThrottler)(nil).IsBlocked), arg0, arg1, arg2)
}

// MockCustomerAuthenticator is a mock of CustomerAuthenticator interface.
type MockCustomerAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockCustomerAuthenticatorMockRecorder
}

// MockCustomerAuthenticatorMockRecorder is the mock recorder for MockCustomerAuthenticator.
type MockCustomerAuthenticatorMockRecorder struct {
	mock *MockCustomerAuthenticator
}

// NewMockCustomerAuthenticator creates a new mock instance.
func NewMockCustomerAuthenticator(ctrl *gomock.Controller) *MockCustomerAuthenticator {
	mock := &MockCustomerAuthenticator{ctrl: ctrl}
	mock.recorder = &MockCustomerAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomerAuthenticator) EXPECT() *MockCustomerAuthenticatorMockRecorder {
	return m.recorder
}

// FindOneByToken mocks base method.
func (m *MockCustomerAuthenticator) FindOneByToken(arg0 context.Context, arg1 string) (*model.Customer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByToken", arg0, arg1)
	ret0, _ := ret[0].(*model.Customer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByToken indicates an expected call of FindOneByToken.
func (mr *MockCustomerAuthenticatorMockRecorder) FindOneByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByToken", reflect.TypeOf((*MockCustomerAuthenticator)(nil).FindOneByToken), arg0, arg1)
}

// MockOperatorAuthenticator is a mock of OperatorAuthenticator interface.
type MockOperatorAuthenticator struct {
	ctrl     *gomock.Controller
	recorder *MockOperatorAuthenticatorMockRecorder
}

// MockOperatorAuthenticatorMockRecorder is the mock recorder for MockOperatorAuthenticator.
type MockOperatorAuthenticatorMockRecorder struct {
	mock *MockOperatorAuthenticator
}

// NewMockOperatorAuthenticator creates a new mock instance.
func NewMockOperatorAuthenticator(ctrl *gomock.Controller) *MockOperatorAuthenticator {
	mock := &MockOperatorAuthenticator{ctrl: ctrl}
	mock.recorder = &MockOperatorAuthenticatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperatorAuthenticator) EXPECT() *MockOperatorAuthenticatorMockRecorder {
	return m.recorder
}

// FindOneByToken mocks base method.
func (m *MockOperatorAuthenticator) FindOneByToken(arg0 context.Context, arg1 string) (*model.Operator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindOneByToken", arg0, arg1)
	ret0, _ := ret[0].(*model.Operator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindOneByToken indicates an expected call of FindOneByToken.
func (mr *MockOperatorAuthenticatorMockRecorder) FindOneByToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindOneByToken", reflect.TypeOf((*MockOperatorAuthenticator)(nil).FindOneByToken), arg0, arg1)
}
