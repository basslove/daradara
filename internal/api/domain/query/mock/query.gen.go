// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/basslove/daradara/internal/api/domain/query (interfaces: SightGenreRelationQuery)

// Package query is a generated GoMock package.
package query

import (
	context "context"
	reflect "reflect"

	model "github.com/basslove/daradara/internal/api/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockSightGenreRelationQuery is a mock of SightGenreRelationQuery interface.
type MockSightGenreRelationQuery struct {
	ctrl     *gomock.Controller
	recorder *MockSightGenreRelationQueryMockRecorder
}

// MockSightGenreRelationQueryMockRecorder is the mock recorder for MockSightGenreRelationQuery.
type MockSightGenreRelationQueryMockRecorder struct {
	mock *MockSightGenreRelationQuery
}

// NewMockSightGenreRelationQuery creates a new mock instance.
func NewMockSightGenreRelationQuery(ctrl *gomock.Controller) *MockSightGenreRelationQuery {
	mock := &MockSightGenreRelationQuery{ctrl: ctrl}
	mock.recorder = &MockSightGenreRelationQueryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSightGenreRelationQuery) EXPECT() *MockSightGenreRelationQueryMockRecorder {
	return m.recorder
}

// FindByNameAndCategoryID mocks base method.
func (m *MockSightGenreRelationQuery) FindByNameAndCategoryID(arg0 context.Context, arg1 string, arg2, arg3, arg4 uint64) ([]*model.SightGenreRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByNameAndCategoryID", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].([]*model.SightGenreRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByNameAndCategoryID indicates an expected call of FindByNameAndCategoryID.
func (mr *MockSightGenreRelationQueryMockRecorder) FindByNameAndCategoryID(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByNameAndCategoryID", reflect.TypeOf((*MockSightGenreRelationQuery)(nil).FindByNameAndCategoryID), arg0, arg1, arg2, arg3, arg4)
}
