version: "3.9"

services:
#  devapp:
#    build:
#      context: .
#      dockerfile: ./build/app/Dockerfile
#      target: dev
#      args:
#        # ALPINE_IMAGE: ${ALPINE_IMAGE}
#        GO_IMAGE_NAME: ${GO_IMAGE}
#        APP_NAME: ${APPLICATION}
#        SERVICE: backend-api
#    container_name: go_dev_app
#    tty: true
#    stdin_open: true
#    volumes:
#      - .:/${APPLICATION}/
#    ports:
#      - 127.0.0.1:1323:1323
#    depends_on:
#        - devdb
#    networks:
#        - dev-app-net

  devdb:
    image: ${DB_IMAGE}
    container_name: "golang_dev_db"
    tty: true
    environment:
      - POSTGRES_USER=${DB_PSQL_DATABASE_USER}
      - POSTGRES_PASSWORD=${DB_PSQL_DATABASE_PASS}
      - POSTGRES_DB=${DB_PSQL_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS=${DB_PSQL_INITDB_ARGS}
      - PGDATA=${DB_PSQL_PGDATA}
      - TZ=${DB_PSQL_TIME_ZONE}
    volumes:
      - ./build/database/postgresql/developdb/data:/var/lib/postgresql/data:cached
      # - ./build/database/postgresql/init:/docker-entrypoint-initdb.d
    ports:
      - ${DB_PSQL_PORT}:5432
    restart: on-failure
    networks:
        - dev-app-net
    healthcheck:
        test: ["CMD-SHELL", "pg_isready -U ${DB_PSQL_DATABASE_USER} -d ${DB_PSQL_DATABASE_NAME}"]
        interval: 10s
        timeout: 5s
        retries: 5

  testdb:
    image: ${DB_IMAGE}
    container_name: "golang_test_db"
    environment:
      - POSTGRES_USER=${TESTDB_PSQL_DATABASE_USER}
      - POSTGRES_PASSWORD=${TESTDB_PSQL_DATABASE_PASS}
      - POSTGRES_DB=${TESTDB_PSQL_DATABASE_NAME}
      - POSTGRES_INITDB_ARGS=${TESTDB_PSQL_INITDB_ARGS}
      - PGDATA=${TESTDB_PSQL_PGDATA}
      - TZ=${TESTDB_PSQL_TIME_ZONE}
    volumes:
      - ./build/database/postgresql/testdb/data:/var/lib/postgresql/data:cached
      # - ./build/database/postgresql/init:/docker-entrypoint-initdb.d
    ports:
      - ${TESTDB_PSQL_PORT}:5432
    restart: on-failure

networks:
    dev-app-net:
        driver: bridge
